<?php

namespace App\Http\Controllers;

use App\Exports\CrudExampleExport;
use App\Helpers\Helper;
use App\Http\Requests\REQUESTNAME;
use App\Imports\CrudExampleImport;
use App\Models\MODELNAME;
use App\Repositories\REPOSITORYNAME;
use App\Services\EmailService;
use App\Services\FileService;
use Illuminate\Http\Request;
use Illuminate\Http\Response;
use Maatwebsite\Excel\Facades\Excel;
use Symfony\Component\HttpFoundation\BinaryFileResponse;
use Barryvdh\DomPDF\Facade as PDF;

class CrudExampleController extends Controller
{
    /**
     * VARREPOSITORYNAME
     *
     * @var REPOSITORYNAME
     */
    private REPOSITORYNAME $VARREPOSITORYNAME;

    /**
     * file service
     *
     * @var FileService
     */
    private FileService $fileService;

    /**
     * email service
     *
     * @var FileService
     */
    private EmailService $emailService;

    /**
     * constructor method
     *
     * @return void
     */
    public function __construct()
    {
        $this->VARREPOSITORYNAME = new REPOSITORYNAME;
        $this->fileService           = new FileService;
        $this->emailService          = new EmailService;

        $this->middleware('can:TITLE');
        $this->middleware('can:TITLE Tambah')->only(['create', 'store']);
        $this->middleware('can:TITLE Ubah')->only(['edit', 'update']);
        $this->middleware('can:TITLE Hapus')->only(['destroy']);
        $this->middleware('can:TITLE Ekspor')->only(['json', 'excel', 'csv', 'pdf']);
        $this->middleware('can:TITLE Impor Excel')->only(['importExcel', 'importExcelExample']);
    }

    /**
     * showing data page
     *
     * @return Response
     */
    public function index()
    {
        $user = auth()->user();
        return view('stisla.FOLDERVIEW.index', [
            'data'           => $this->VARREPOSITORYNAME->getLatest(),
            'canCreate'      => $user->can('Contoh CRUD Tambah'),
            'canUpdate'      => $user->can('Contoh CRUD Ubah'),
            'canDelete'      => $user->can('Contoh CRUD Hapus'),
            'canImportExcel' => $user->can('Contoh CRUD Impor Excel'),
            'canExport'      => $user->can('Contoh CRUD Ekspor'),
            'title'          => __('Contoh CRUD')
        ]);
    }

    /**
     * showing add new data form page
     *
     * @return Response
     */
    public function create()
    {
        return view('stisla.FOLDERVIEW.form', [
            'title'         => __('Contoh CRUD'),
            'fullTitle'     => __('Tambah Contoh CRUD'),
            'routeIndex'    => route('crud-examples.index'),
            'action'        => route('crud-examples.store')
        ]);
    }

    /**
     * save new data to db
     *
     * @param REQUESTNAME $request
     * @return Response
     */
    public function store(REQUESTNAME $request)
    {
        $data = $request->only([
            COLUMNS
        ]);

        // gunakan jika ada file
        // if ($request->hasFile('file')) {
        //     $data['file'] = $this->fileService->uploadCrudExampleFile($request->file('file'));
        // }

        $result = $this->VARREPOSITORYNAME->create($data);
        logCreate("Contoh CRUD", $result);
        $successMessage = successMessageCreate("Contoh CRUD");
        return redirect()->back()->with('successMessage', $successMessage);
    }

    /**
     * showing edit page
     *
     * @param CrudExample VARMODELNAME
     * @return Response
     */
    public function edit(CrudExample VARMODELNAME)
    {
        return view('stisla.crud-example.form', [
            'selectOptions' => ['option 1' => 'option 1', 'option 2' => 'option 2', 'option 3' => 'option 3',],
            'd'             => VARMODELNAME,
            'title'         => __('Contoh CRUD'),
            'fullTitle'     => __('Ubah Contoh CRUD'),
            'routeIndex'    => route('crud-examples.index'),
            'action'        => route('crud-examples.update', [VARMODELNAME->id])
        ]);
    }

    /**
     * update data to db
     *
     * @param REQUESTNAME $request
     * @param CrudExample VARMODELNAME
     * @return Response
     */
    public function update(REQUESTNAME $request, CrudExample VARMODELNAME)
    {
        $data = $request->only([
            'text',
            "number",
            "select",
            "textarea",
            "radio",
            "date",
            'checkbox',
            "time",
            "color",
            'select2',
            'select2_multiple'
        ]);
        if ($request->hasFile('file')) {
            $data['file'] = $this->fileService->uploadCrudExampleFile($request->file('file'));
        }
        $newData = $this->VARREPOSITORYNAME->update($data, VARMODELNAME->id);
        logUpdate("Contoh CRUD", VARMODELNAME, $newData);
        $successMessage = successMessageUpdate("Contoh CRUD");
        return redirect()->back()->with('successMessage', $successMessage);
    }

    /**
     * delete user from db
     *
     * @param CrudExample VARMODELNAME
     * @return Response
     */
    public function destroy(CrudExample VARMODELNAME)
    {
        $this->fileService->deleteCrudExampleFile(VARMODELNAME);
        $this->VARREPOSITORYNAME->delete(VARMODELNAME->id);
        logDelete("Contoh CRUD", VARMODELNAME);
        $successMessage = successMessageDelete("Contoh CRUD");
        return redirect()->back()->with('successMessage', $successMessage);
    }

    /**
     * download import example
     *
     * @return BinaryFileResponse
     */
    public function importExcelExample(): BinaryFileResponse
    {
        return Excel::download(new CrudExampleExport(
            $this->VARREPOSITORYNAME->getLatest()
        ), 'crud_examples.xlsx');
    }

    /**
     * import excel file to db
     *
     * @param \App\Http\Requests\ImportExcelRequest $request
     * @return Response
     */
    public function importExcel(\App\Http\Requests\ImportExcelRequest $request)
    {
        Excel::import(new CrudExampleImport, $request->file('import_file'));
        $successMessage = successMessageImportExcel("Contoh CRUD");
        return redirect()->back()->with('successMessage', $successMessage);
    }

    /**
     * download export data as json
     *
     * @return Response
     */
    public function json()
    {
        $data = $this->VARREPOSITORYNAME->getLatest();
        return $this->fileService->downloadJson($data, 'crud_examples.json');
    }

    /**
     * download export data as xlsx
     *
     * @return Response
     */
    public function excel()
    {
        $data = $this->VARREPOSITORYNAME->getLatest();
        return (new CrudExampleExport($data))->download('crud_examples.xlsx', \Maatwebsite\Excel\Excel::XLSX);
    }

    /**
     * download export data as csv
     *
     * @return Response
     */
    public function csv()
    {
        $data = $this->VARREPOSITORYNAME->getLatest();
        return (new CrudExampleExport($data))->download('crud_examples.csv', \Maatwebsite\Excel\Excel::CSV);
    }

    /**
     * download export data as pdf
     *
     * @return Response
     */
    public function pdf()
    {
        $data = $this->VARREPOSITORYNAME->getLatest();
        return PDF::setPaper('Letter', 'landscape')
            ->loadView('stisla.crud-example.export-pdf', [
                'data'     => $data,
                'isExport' => true
            ])
            ->download('crud_examples.pdf');
    }
}
